package kejamart.controller.propertypic;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ValidationUtils;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import kejamart.controller.main.UserSession;
import kejamart.dao.AlertsDAO;
import kejamart.dao.CountiesDAO;
import kejamart.dao.CountriesDAO;
import kejamart.dao.LocationsDAO;
import kejamart.dao.MailConfigDAO;
import kejamart.dao.PropertyDAO;
import kejamart.dao.PropertyPicDAO;
import kejamart.helper.Settings;
import kejamart.model.Property;
import kejamart.model.PropertyPics;


@Controller
public class PublishPicControllerx implements Settings {

	AlertsDAO alertsDAO;
	PropertyPics propertyPics;
	PropertyPicDAO propertyPicDAO;
	MailConfigDAO mailConfigDAO;
	PropertyDAO propertyDAO;	
	CountriesDAO countriesDAO;		
	CountiesDAO countiesDAO;	
	LocationsDAO locationsDAO;
	UserSession userSession = new UserSession();
	
	private List<PropertyPics> propertyPicList = new ArrayList<PropertyPics>(); 
	
	public static Logger logger = Logger.getLogger(PublishPicControllerx.class);	

    private List<PropertyPics> PropertyPicList = new ArrayList<PropertyPics>();	
    
    private JavaMailSender mailSender;

    public void setMailSender(JavaMailSender mailSender) {
        this.mailSender = mailSender;
    } 
	
	@RequestMapping(value="/publishpics", method=RequestMethod.GET)
	public ModelAndView listProperty(HttpServletRequest request) throws Exception {
		
		ModelAndView modelAndView = new ModelAndView("public");

		if (request.getSession().getAttribute(SESSION_USER) != null){

		String emailUser = request.getSession().getAttribute(SESSION_USER).toString();
		int id = Integer.parseInt(request.getParameter("id"));

		List<PropertyPics> propertyPics = propertyPicDAO.getPropertyPicsForId(id);
		
		int prid = Integer.parseInt(request.getParameter("propertyId"));
		int pid = 0;
		pid = prid;
		request.getSession().setAttribute(PROPERTY_DETAILS, pid);
				
		int idValue = 0;
		idValue = id;
		request.getSession().setAttribute(PICTURE_DETAILS, idValue);		
		
		modelAndView.addObject("propertyPics", propertyPics);
		System.out.println("User authorized to access property pic page");
		return modelAndView; 
		
		} else {
			
		ModelAndView model = new ModelAndView("restricted");
		System.out.println("Visitor NOT authorized to access property pic page");
		
		return model;
			
		}

	}
		 
	@RequestMapping(value="/publishpics", method=RequestMethod.POST)
	public String publishPropertyPics(Model model, HttpServletRequest request, @ModelAttribute(value="propertyPics") PropertyPics propertyPics, BindingResult result) throws Exception{

	Date date = new Date();
	SimpleDateFormat fomat = new SimpleDateFormat("yyyy-MM-dd");
	java.sql.Date dat = new java.sql.Date(date.getTime());  
	int id = Integer.parseInt(request.getParameter("id"));
	String emailUser = request.getSession().getAttribute(SESSION_USER).toString();
	int pid = Integer.parseInt(request.getParameter("propertyId"));
	System.out.println("Publish Button clicked: >|< " +pid);
	
	//Initialising validation error messages
	ValidationUtils.rejectIfEmptyOrWhitespace(result, "fileName", "File Name is missing.");
	
	propertyPics.setStatus("1");
	propertyPics.setEmail(emailUser);	
	propertyPics.setCreatedDate(dat);
	
	propertyPicDAO.updatePic(propertyPics, id);	
	System.out.println("Property published succesfully");
	
	// Property Values
	Property pr = propertyDAO.getPropertyById(pid);
	String contrVal = pr.getCountry();
	String contVal = pr.getCountyVal();
	String contx = pr.getCounty();
	String locVal = pr.getLocationVal();
	String locx = pr.getLocation();
	String propTVal = pr.getPropertyType();
	String catVal = pr.getCategory();
	String bedrVal = pr.getBedrooms();

	//Notification Logic
	
	/*List<Alerts> al = alertsDAO.listNotifications(contrVal, contx, locx, propTVal, catVal);
	
	for (int i = 0; i < al.size(); i++) {

    int alertSize = al.size();
    String emailAlerts = al.listIterator().next().getEmail();
    String alertDate = (new SimpleDateFormat("dd-MMM-yyyy")).format(al.listIterator().next().getCreatedDate());

	System.out.println("Total Alerts in List " +alertSize);
	System.out.println("Alert Emails " +emailAlerts);
	
	// Send Mail to Users
	
    List<MailConfig> mailcon = mailConfigDAO.getMailConfig();
    JavaMailSenderImpl sender = new JavaMailSenderImpl();
    Properties props = new Properties();
    props.put(mailcon.listIterator().next().getTransportProtocol(), mailcon.listIterator().next().getProtocol());
    props.put(mailcon.listIterator().next().getSmtpStartTls(), mailcon.listIterator().next().getStatus());

    sender.setHost(mailcon.listIterator().next().getSmtpHost());
    sender.setPort(mailcon.listIterator().next().getSmtpPort());
    sender.setUsername(mailcon.listIterator().next().getHostUserName());
    sender.setPassword(mailcon.listIterator().next().getHostPassword());
    sender.setJavaMailProperties(props);

	// use the true flag to indicate you need a multipart message    
	MimeMessage message = sender.createMimeMessage();

	MimeMessageHelper helper = new MimeMessageHelper(message);
	helper.setTo(emailUser);
	helper.setSubject("Kejani: Alert Notification");
		
	StringBuffer sb = new StringBuffer();

    sb.append("<html><body>Dear <a style='color: style='color: #191970;'><b>" +emailAlerts+ "</b></a>,");
    sb.append("<p><br>Based on the criteria of your Property Alert created on <b>"+alertDate+",</b> the below property is now available.<p>");
    sb.append("<table style='border: 1px solid #483D8B; width: 650px;'><tr style='border: 1px solid #191970;'>");
    sb.append("<th style='color: #191970;'>County</th><th style='color: #191970;'>Location</th>");
    sb.append("<th style='color: #191970;'>Category</th><th style='color: #191970;'>Property Type</th><th style='color: #191970;'>Bedrooms</th></tr>");
    sb.append("<tr style='border: 1px solid #483D8B'><th style='color: #191970;'>"+ contVal+"</th><th style='color: #191970;'>"+ locVal+"</th>");
    sb.append("<th style='color: #191970;'>"+ catVal+"</th><th style='color: #191970;'>"+ propTVal+"</th>");
    sb.append("<th style='color: #191970;'>"+bedrVal+"</th></tr></table><p>");
    sb.append("<br>Keep enjoying our property alert services which are and shall always be free.");
    sb.append("<p><br>Regards <p><br> The Kejani Team<p><a href='www.kejani.info'><u>www.kejani.info</u></a><p>");
    sb.append("<h1 style='color:#1E90FF; text-shadow: 2px 2px #DCDCDC; font-family: Avant Garde,Avantgarde,Century Gothic,CenturyGothic,AppleGothic,sans-serif !important;'>");
    sb.append("<i>Kejani</i></h1>");  
    sb.append("<h3 style='color: #7aa329 !important; font-family: Helvetica Neue,Helvetica,Arial,sans-serif !important;'>Your Property Listing Partner.</h3>");
    sb.append("<p><br></body></html>");   

	helper.setText(sb.toString(), true);
	
	try {
        sender.send(message);
        System.out.println("Email succesfully sent to "+emailAlerts ); 
    }
    catch (MailException ex) {
        System.err.println(ex.getMessage());
    }
	} // End of Loop*/
	
	return "redirect:" + "picturelist.html";
	
    } 


	
	
	public LocationsDAO getLocationsDAO() {
		return locationsDAO;
	}

	public void setLocationsDAO(LocationsDAO locationsDAO){
		this.locationsDAO = locationsDAO;
	}

	public CountiesDAO getCountiesDAO() {
		return countiesDAO;
	}

	public void setCountiesDAO(CountiesDAO countiesDAO){
		this.countiesDAO = countiesDAO;
	}

	public CountriesDAO getCountriesDAO() {
		return countriesDAO;
	}

	public void setCountriesDAO(CountriesDAO countriesDAO){
		this.countriesDAO = countriesDAO;
	}	
	
	public PropertyDAO getPropertyDAO() {
		return propertyDAO;
	}
	
	public void setPropertyDAO(PropertyDAO propertyDAO){
		this.propertyDAO = propertyDAO;
	}
	
	public MailConfigDAO getMailConfigDAO() {
		return mailConfigDAO;
	}

	public void setMailConfigDAO(MailConfigDAO mailConfigDAO){
		this.mailConfigDAO = mailConfigDAO;
	}
	
	public PropertyPicDAO getPropertyPicDAO() {
		return propertyPicDAO;
	}
	
	public void setPropertyPicDAO(PropertyPicDAO propertyPicDAO){
		this.propertyPicDAO = propertyPicDAO;
	}
	public AlertsDAO getAlertsDAO() {
		return alertsDAO;
	}

	public void setAlertsDAO(AlertsDAO alertsDAO){
		this.alertsDAO = alertsDAO;
	}
}


